{"version":3,"sources":["helpers.js","Card.jsx","Header.jsx","App.js","index.js"],"names":["removeDuplicates","arr","Set","sortArray","sort","getYears","mediaArr","years","map","media","year","getGenres","genres","forEach","genre","console","log","genresValueRenderer","selected","options","length","plural","yearsValueRenderer","Card","props","className","alt","src","poster","onError","e","target","title","g","Header","searchText","selectedGenres","selectedYears","selectedType","setSearchText","setSelectedGenres","setSelectedYears","setSelectedType","clearAllFilters","genreOptions","label","value","yearOptions","y","selectAllLabel","isLoading","disabled","disableSearch","hasSelectAll","valueRenderer","onSelectedChanged","values","selec","overrideStrings","selectAll","type","checked","name","id","onChange","htmlFor","data-role","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","onClick","App","useState","userData","setUserData","setGenres","setYears","useEffect","getGitHubUserWithFetch","a","fetch","response","json","jsonData","dataYears","dataGenres","filteredMedia","filter","mediaGenres","undefined","find","includes","checkGeneres","checkYear","checkMediaType","toUpperCase","indexOf","searchMedia","getFilteredMedias","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.96eafa49.chunk.js","sourcesContent":["// Removing duplicate values in a Array.\r\nconst removeDuplicates = (arr) => {\r\n  return [...new Set(arr)];\r\n};\r\n\r\n// Sorts the values in array and return the sorted array.\r\nconst sortArray = (arr) => {\r\n  return arr.sort();\r\n};\r\n\r\nexport const getYears = (mediaArr) => {\r\n  // Retriving years from al medias.\r\n  let years = mediaArr.map((media) => media.year);\r\n\r\n  //remove duplicate years and return unique years.\r\n  years = removeDuplicates(years);\r\n  years = sortArray(years);\r\n  return years;\r\n};\r\n\r\nexport const getGenres = (mediaArr) => {\r\n  let genres = [];\r\n  // Retriving Genres from all medias.\r\n  mediaArr.forEach((media) => {\r\n    genres = [...genres, ...media.genre];\r\n  });\r\n\r\n  console.log(\"Genres: \", genres);\r\n\r\n  // remove duplicate genres and return unique genres\r\n  genres = removeDuplicates(genres);\r\n  genres = sortArray(genres);\r\n  return genres;\r\n};\r\n\r\nexport const getTypes = (mediaArr) => {\r\n  //Retriving types from medias.\r\n  const types = mediaArr.map((media) => media.type);\r\n\r\n  // removing duplicate types and return\r\n  return removeDuplicates(types);\r\n};\r\n\r\nexport const genresValueRenderer = (selected, options) => {\r\n  if (selected.length === 0) {\r\n    return \"Genres...\";\r\n  }\r\n  if (selected.length === options.length) {\r\n    return \"All Genres\";\r\n  }\r\n  const plural = selected.length === 1 ? \"\" : \"s\";\r\n  return `${selected.length} Genre${plural}`;\r\n};\r\n\r\nexport const yearsValueRenderer = (selected, options) => {\r\n  if (selected.length === 0) {\r\n    return \"Years...\";\r\n  }\r\n  if (selected.length === options.length) {\r\n    return \"All Years\";\r\n  }\r\n  const plural = selected.length === 1 ? \"\" : \"s\";\r\n  return `${selected.length} Year${plural}`;\r\n};\r\n\r\n// FILTERING FUNCTIONS FOR MEDIA CARDS.\r\nexport const checkGeneres = (selectedGenres, mediaGenres) => {\r\n  const machingGenre = mediaGenres.find((media) => selectedGenres.includes(media));\r\n  return machingGenre !== undefined;\r\n};\r\n\r\nexport const checkYear = (selectedYears, year) => {\r\n  return selectedYears.includes(year);\r\n};\r\n\r\nexport const checkMediaType = (selectedType, type) => {\r\n  return selectedType === type;\r\n};\r\n\r\nexport const searchMedia = (searchText, title, year) => {\r\n  return title.toUpperCase().indexOf(searchText.toUpperCase()) >= 0 || year.toUpperCase().indexOf(searchText.toUpperCase()) >= 0;\r\n};\r\n","import placeHolderImg from \"./movie-icon.png\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        className=\"media-img\"\r\n        alt=\"posterimage\"\r\n        src={props.poster}\r\n        onError={(e) => {\r\n          e.target.src = \"https://via.placeholder.com/300x400/000/808?Text=Movie\";\r\n        }}\r\n      />\r\n      <div className=\"media-description\">\r\n        <span>\r\n          <strong>{`${props.title} (${props.year})`}</strong>\r\n        </span>\r\n        <div>\r\n          <div className=\"genres-content\">\r\n            <span>Genres:</span>\r\n            <ul className=\"genres-list\">\r\n              {props.genre?.map((g) => (\r\n                <li className=\"genre\" key={g}>\r\n                  {g}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import MultiSelect from \"@khanacademy/react-multi-select\";\r\nimport { genresValueRenderer, yearsValueRenderer } from \"./helpers\";\r\n\r\nconst Header = (props) => {\r\n  const { genres, years, searchText, selectedGenres, selectedYears, selectedType, setSearchText, setSelectedGenres, setSelectedYears, setSelectedType, clearAllFilters } = props;\r\n  const genreOptions = genres.map((g) => ({ label: g, value: g }));\r\n  const yearOptions = years.map((y) => ({ label: y, value: y }));\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <div className=\"filters-catagory\">\r\n        <div className=\"select-filters\">\r\n          <div className=\"dropdown-filters\">\r\n            <div className=\"multiselect-sections\">\r\n              <MultiSelect\r\n                selectAllLabel={false}\r\n                selected={selectedGenres}\r\n                isLoading={false}\r\n                disabled={false}\r\n                disableSearch={true}\r\n                hasSelectAll={false}\r\n                valueRenderer={genresValueRenderer}\r\n                options={genreOptions}\r\n                onSelectedChanged={(values) => setSelectedGenres(values)}\r\n              />\r\n            </div>\r\n            <div className=\"multiselect-sections\">\r\n              <MultiSelect\r\n                selectAllLabel={false}\r\n                selec\r\n                selected={selectedYears}\r\n                isLoading={false}\r\n                disabled={false}\r\n                disableSearch={true}\r\n                hasSelectAll={false}\r\n                valueRenderer={yearsValueRenderer}\r\n                overrideStrings={{ selectAll: \"asdas\" }}\r\n                options={yearOptions}\r\n                onSelectedChanged={(values) => setSelectedYears(values)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"category radio-filters\">\r\n          <div className=\"category-radio\">\r\n            <input type=\"radio\" checked={selectedType === \"movie\"} name=\"mediaType\" id=\"movie\" onChange={() => setSelectedType(\"movie\")} />\r\n            <label htmlFor=\"movie\">Movies</label>\r\n          </div>\r\n          <div className=\"category-radio\">\r\n            <input type=\"radio\" checked={selectedType === \"book\"} name=\"mediaType\" id=\"book\" onChange={() => setSelectedType(\"book\")} />\r\n            <label htmlFor=\"book\">Books</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"search\">\r\n        <div className=\"input-container\">\r\n          <input type=\"text\" value={searchText} onChange={(e) => setSearchText(e.target.value)} />\r\n          <span className=\"input_img\" data-role=\"toggle\">\r\n            <svg\r\n              aria-hidden=\"true\"\r\n              focusable=\"false\"\r\n              data-prefix=\"fas\"\r\n              data-icon=\"search\"\r\n              className=\"svg-inline--fa fa-search fa-w-16\"\r\n              role=\"img\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 512 512\"\r\n            >\r\n              <path\r\n                fill=\"currentColor\"\r\n                d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n        </div>\r\n        <label className=\"clear-filters\" onClick={clearAllFilters}>\r\n          CLEAR FILTERS\r\n        </label>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"./styles.scss\";\r\nimport { checkGeneres, checkMediaType, checkYear, getGenres, getTypes, getYears, searchMedia } from \"./helpers\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport Header from \"./Header\";\r\n\r\n//githuburl variable to = the url\r\nconst gitHubUrl = \"https://hubspotwebteam.github.io/CodeExercise/src/js/data/data.json\";\r\n\r\nfunction App() {\r\n  const [userData, setUserData] = useState([]);\r\n  const [genres, setGenres] = useState([]);\r\n  const [years, setYears] = useState([]);\r\n\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const [selectedYears, setSelectedYears] = useState([]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getGitHubUserWithFetch();\r\n  }, []);\r\n\r\n  // fetching data from the url above\r\n  const getGitHubUserWithFetch = async () => {\r\n    const response = await fetch(gitHubUrl);\r\n    const jsonData = await response.json();\r\n    // const jsonData = data;\r\n\r\n    // preparing the values for dropdowns\r\n    const dataYears = getYears(jsonData.media);\r\n    const dataGenres = getGenres(jsonData.media);\r\n\r\n    // setting the dropdown values for genres and years.\r\n    setYears(dataYears);\r\n    setGenres(dataGenres);\r\n\r\n    // setting media data\r\n    setUserData(jsonData.media);\r\n  };\r\n\r\n  const cleaAllFilters = () => {\r\n    setSearchText(\"\");\r\n    setSelectedGenres([]);\r\n    setSelectedType(\"\");\r\n    setSelectedYears([]);\r\n  };\r\n\r\n  const getFilteredMedias = () => {\r\n    let filteredMedia = selectedGenres.length > 0 ? userData.filter((media) => checkGeneres(selectedGenres, media.genre)) : userData;\r\n    filteredMedia = selectedYears.length > 0 ? filteredMedia.filter((media) => checkYear(selectedYears, media.year)) : filteredMedia;\r\n    filteredMedia = selectedType.length > 0 ? filteredMedia.filter((media) => checkMediaType(selectedType, media.type)) : filteredMedia;\r\n    filteredMedia = searchText.length > 0 ? filteredMedia.filter((media) => searchMedia(searchText, media.title, media.year)) : filteredMedia;\r\n    return filteredMedia;\r\n  };\r\n\r\n  const filteredMedia = getFilteredMedias();\r\n\r\n  // displaying it onto the page with this code\r\n  return (\r\n    <div className=\"App\">\r\n      <Header\r\n        genres={genres}\r\n        years={years}\r\n        searchText={searchText}\r\n        selectedGenres={selectedGenres}\r\n        selectedYears={selectedYears}\r\n        selectedType={selectedType}\r\n        setSearchText={setSearchText}\r\n        setSelectedGenres={setSelectedGenres}\r\n        setSelectedYears={setSelectedYears}\r\n        setSelectedType={setSelectedType}\r\n        clearAllFilters={cleaAllFilters}\r\n      />\r\n      <div className=\"medialist-container\">\r\n        {\r\n          // include the map to filter thru media object\r\n          filteredMedia.map((media) => (\r\n            <Card key={media.title} {...media} />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}